<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gam0022.net</title>
    <link>https://gam0022.net/tags/hugo/index.xml</link>
    <description>Recent content on gam0022.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>&amp;copy; 2021 gam0022</copyright>
    <atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HugoをGitHub Pagesで公開し、2リポジトリ構成の管理を楽にする方法</title>
      <link>https://gam0022.net/blog/2022/05/07/hugo-on-github-pages/</link>
      <pubDate>Sat, 07 May 2022 20:05:08 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2022/05/07/hugo-on-github-pages/</guid>
      <description>&lt;p&gt;本サイトのホスト先をConoHa VPSからGitHub Pagesに乗り換えました。&lt;/p&gt;

&lt;p&gt;実は去年の5月に乗り換えていて、1年ほど運用して方針が固まったので記事にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/thumbnail.png&#34; alt=&#34;Hugo on GitHub Pages&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;vps-github-pagesの移行理由&#34;&gt;VPS→GitHub Pagesの移行理由&lt;/h1&gt;

&lt;p&gt;お金です。費用の削減が目的です。&lt;/p&gt;

&lt;p&gt;ConoHa VPSは月額1000円ほどの固定費がかかっていましたが、GitHub Pagesは無料です。&lt;/p&gt;

&lt;p&gt;また、VPSだと急にブログにアクセスが増えた場合にスケールしづらい・費用がかかるなどの懸念もありました。&lt;/p&gt;

&lt;h1 id=&#34;hugoをgithub-pagesにホスティングする&#34;&gt;HugoをGitHub Pagesにホスティングする&lt;/h1&gt;

&lt;p&gt;GitHub Pagesは、GitHubが静的ウェブページのためのウェブホスティングサービスです。
HTMLやCSSなどの静的ファイルをGitHubのリポジトリにコミットすることで静的サイトを公開できます。&lt;/p&gt;

&lt;h2 id=&#34;2リポジトリ構成とは&#34;&gt;2リポジトリ構成とは&lt;/h2&gt;

&lt;p&gt;GitHub Pagesでは、特定のブランチやディレクトリをサイトのルートとして指定できます。&lt;/p&gt;

&lt;p&gt;ディレクトリ指定を考慮すると、大きく分けて2つのリポジトリ構成が考えられます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;リポジトリ1つ構成

&lt;ul&gt;
&lt;li&gt;Hugoのpublicディレクトリ以下を公開する設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リポジトリ2つ構成（こっちを採用！！）

&lt;ul&gt;
&lt;li&gt;Hugoのプロジェクト（記事のマークダウンやHugoテンプレートなど）のリポジトリ&lt;/li&gt;
&lt;li&gt;Hugoの生成物（HTMLやCSSなどの公開用の静的コンテンツ）のリポジトリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最終的に2.のリポジトリ2つ構成に落ち着きました。&lt;/p&gt;

&lt;p&gt;1.の方がシンプルですが、コミットの差分が多くなってしまい、文章校正などがやりづらいと思ったからです。&lt;/p&gt;

&lt;p&gt;具体的には以下の2つのリポジトリ構成にしました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com-source-hugo&#34;&gt;https://github.com/gam0022/gam0022.github.com-source-hugo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Hugoのプロジェクト（記事のマークダウンやHugoテンプレートなど）のリポジトリ&lt;/li&gt;
&lt;li&gt;2. のリポジトリをsubmoduleとして参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com&#34;&gt;https://github.com/gam0022/gam0022.github.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Hugoの生成物（HTMLやCSSなどの公開用の静的コンテンツ）のリポジトリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2リポジトリ構成のcommitをバッチで自動化&#34;&gt;2リポジトリ構成のcommitをバッチで自動化&lt;/h2&gt;

&lt;p&gt;2リポジトリ構成ではコミットが面倒という問題がありました。&lt;/p&gt;

&lt;p&gt;そこで簡単な.batを書いて、バッチを叩くだけで自動的に2リポジトリのcommitとpushができるようにしました。
Windowsを利用している人は参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gam0022/gam0022.github.com-source-hugo/blob/master/deploy.bat&#34;&gt;deploy.bat&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;:: コミットメッセージ
set msg=&amp;quot;Build %date% %time%&amp;quot;

pushd public

:: publicディレクトリを掃除
git fetch -p
git checkout -B master origin/master

popd

:: HTMLを生成
hugo.exe

pushd public

:: HTML生成物をコミット
git add .
git commit -m %msg%
git push origin HEAD

popd

:: ソースをコミット
git add .
git commit -m %msg%
git push origin HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;カスタムドメインとssl化&#34;&gt;カスタムドメインとSSL化&lt;/h1&gt;

&lt;p&gt;現在は独自ドメインのSSL化も簡単にできます。以前はCloudFlare等のCDNが必要でしたが、現在はCDNも不要です。&lt;/p&gt;

&lt;p&gt;独自ドメインのSSL化に必要な設定は2つだけです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub側の設定&lt;/li&gt;
&lt;li&gt;ドメインの管理ページ側のAレコード・CNAMEの設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この記事の情報が古くなっている可能性もあるので、最新の情報は公式マニュアルも参照してください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.github.com/ja/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site&#34;&gt;GitHub Pages サイトのカスタムドメインを管理する&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;github側の設定&#34;&gt;GitHub側の設定&lt;/h2&gt;

&lt;p&gt;リポジトリの &lt;code&gt;Settings &amp;gt; Pages &amp;gt; Custom domain&lt;/code&gt; からカスタムドメインを指定できます。&lt;/p&gt;

&lt;p&gt;SSL証明書の更新まで自動的にGitHub Pages側でやってくれるので、本当にこれだけしかやることがないです。&lt;/p&gt;

&lt;p&gt;SSL化したい場合には、 &lt;code&gt;Enforce HTTPS&lt;/code&gt; にチェックします。&lt;/p&gt;

&lt;p&gt;マニュアルにも書かれていますが、DNSやHTTPSの変更が伝播するには、最大24時間かかるそうです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/github-custom-domain.png&#34; alt=&#34;GitHub側の設定&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ドメインの管理ページ側のaレコード-cnameの設定&#34;&gt;ドメインの管理ページ側のAレコード・CNAMEの設定&lt;/h2&gt;

&lt;p&gt;CNAMEとAレコードを設定して問題なく運用できています。&lt;/p&gt;

&lt;p&gt;筆者はあまりネットワークに詳しくないので、間違っていたら教えてください。&lt;/p&gt;

&lt;p&gt;Aレコード&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CNAME&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gam0022.github.io.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2022-05-07-hugo-on-github-pages/google-domain.png&#34; alt=&#34;Google Domain&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;Hugoのホスト先をVPSからGitHub Pagesに移行して固定費削減できました。&lt;/p&gt;

&lt;p&gt;VPSではrsyncで即時に反映されていたのが、GitHub Pagesにしてから反映に数分かかるなど細かい不満はありますが、無料で使えているので許容範囲かなと思っています。&lt;/p&gt;

&lt;h2 id=&#34;静的cms-ホスティングサービスを選ぶ理由&#34;&gt;静的CMS＋ホスティングサービスを選ぶ理由&lt;/h2&gt;

&lt;p&gt;はてなブログなどのブログサービスへの移行も検討したことも過去にありますが、特定のサービスに依存したくないという考えから現在の構成に落ち着いています。&lt;/p&gt;

&lt;p&gt;企業やサービスの寿命を考えると、10年後や20年後まで存続しているのか分からないので、特定の企業やサービスにロックインしたくありません。&lt;/p&gt;

&lt;p&gt;その点で静的CMS + 適当なサービスにホスティングがブログの持続性（サービス終了のリスク回避）では最強だと考えています。&lt;/p&gt;

&lt;p&gt;もしGitHub Pagesがサービス終了したとしても、その時はまたVPSにホスティングすれば良いだけです。&lt;/p&gt;

&lt;p&gt;完全に余談ですが、ドメインは10年更新にしているので、筆者が死亡したとしてもしばらくサイトは消えないと思います。&lt;/p&gt;

&lt;p&gt;それでは！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OctopressからHugoへ移行する方法</title>
      <link>https://gam0022.net/blog/2016/09/25/migrated-from-octopress-to-hugo/</link>
      <pubDate>Sun, 25 Sep 2016 12:45:18 +0900</pubDate>
      
      <guid>https://gam0022.net/blog/2016/09/25/migrated-from-octopress-to-hugo/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2016-09-25-migrated-from-octopress-to-hugo/migrated-from-octopress-to-hugo.png&#34; alt=&#34;OctopressからHugoへ移行&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当サイトはOctopressを使って生成していたのですが、このたびHugoに移行することにしました。
この記事ではHugoに移行した経緯と、Hugoへの移行手順についてまとめます。
なおローカル環境はMac OS Xです。&lt;/p&gt;

&lt;h1 id=&#34;octopressを辞めた理由&#34;&gt;Octopressを辞めた理由&lt;/h1&gt;

&lt;p&gt;Octopressを辞めた理由は、記事数の増加に伴い、サイトの生成に時間がかかるようになってしまったからです。&lt;/p&gt;

&lt;p&gt;HugoではOctopressに比べてサイトの生成時間が短いことから、Hugoに移行することにしました。&lt;/p&gt;

&lt;p&gt;現在の記事数でのサイトの生成時間は、Octpress(&lt;code&gt;rake generate&lt;/code&gt;コマンド)で 20.39秒、Hugo(&lt;code&gt;hugo&lt;/code&gt;コマンド)では 2.66秒でした！&lt;/p&gt;

&lt;p&gt;他にも、Octpressは直近のコミットが半年前のもので、活発にメンテナンスされていないと感じたことも、Hugoへ移行した理由の1つです。&lt;/p&gt;

&lt;h1 id=&#34;hugoのインストール&#34;&gt;Hugoのインストール&lt;/h1&gt;

&lt;p&gt;Macの場合はHomebrewからインストールするのが良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update
brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mac以外の方は、公式ページを参考にして、ソースコードからインストールしましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;Hugo - Installing Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugoを使ってみる&#34;&gt;Hugoを使ってみる&lt;/h1&gt;

&lt;p&gt;Hugoでページを生成して、ブラウザで表示を確認するまでの最短手順は以下の通りです。&lt;/p&gt;

&lt;p&gt;各手順の詳細は&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart Guide&lt;/a&gt;で確認しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Hugoのプロジェクトをつくる
hugo new site hugo-site
cd hugo-site

# 記事を生成
hugo new post/good-to-great.md

# テンプレートをインストール
# テンプレートがない状態では、真っ白なページしか表示されません
mkdir themes
cd themes
git clone https://github.com/dim0627/hugo_theme_robust.git

# ローカルサーバでプレビュー
# http://localhost:1313/ にブラウザでアクセスすることで、プレビューを確認できます
cd ..
hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;hugo記事へ記事の移行する&#34;&gt;Hugo記事へ記事の移行する&lt;/h1&gt;

&lt;p&gt;Octopress の記事を Hugo に移植する大まかな手順は次の4つです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdownの記事のコピー&lt;/li&gt;
&lt;li&gt;画像のコピー&lt;/li&gt;
&lt;li&gt;Octopressの独自記法をPure Markdownに置換&lt;/li&gt;
&lt;li&gt;Octopressと同一のパーマリンクにする（オプション）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;markdownの記事のコピー&#34;&gt;Markdownの記事のコピー&lt;/h2&gt;

&lt;p&gt;Octopressでは、&lt;code&gt;source/_posts&lt;/code&gt;に記事を配置しましたが、Hugoでは&lt;code&gt;content/post&lt;/code&gt;に配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp octopress-site/source/_posts/* hugo-site/content/post/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;画像のコピー&#34;&gt;画像のコピー&lt;/h2&gt;

&lt;p&gt;Octopressでは画像ファイルを、&lt;code&gt;source/images/&lt;/code&gt;に配置しましたが、Hugoでは&lt;code&gt;static/images/&lt;/code&gt;に配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -r octopress-site/source/images/* hugo-site/static/images/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;octopressの独自タグをpure-markdownに置換&#34;&gt;Octopressの独自タグをPure Markdownに置換&lt;/h2&gt;

&lt;p&gt;Octopressのみでしか使えない独自記法を、Hugoでも扱えるようMarkdownに書き換える必要があります。&lt;/p&gt;

&lt;p&gt;将来的な移行を考えると、独自記法は極力避けて、なるべくプラットフォームに依存しない書き方をするべきだと痛感しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd content/post/

# 記事のタイムスタンプの形式を変える
# Hugoでは、&amp;quot;2016-09-25T15:09:57&amp;quot;のような形式のタイムスタンプでないとパースに失敗します
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/date: \([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\) \([0-9]\{2\}:[0-9]\{2\}\)$/date: \1T\2:00+09:00/g&#39; {} \;

# コードブロック
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{% codeblock lang:\([a-z]*\) %}/```\1/g&#39; {} \;
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{% codeblock %}/```/g&#39; {} \;
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{% endcodeblock %}/```/g&#39; {} \;

# s/categories/tags/
# OctopressのカテゴリーはHugoのタグに相当します
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/^categories:.*/tags:/g&#39; {} \;

# 画像
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{% img \([^ ]*\) \(.*\) %}/![\2](\1)/g&#39; {} \;

# class付きの画像
find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{% img right \([^ ]*\) \(.*\) %}/&amp;lt;img alt=&amp;quot;\2&amp;quot; src=&amp;quot;\1&amp;quot; class=&amp;quot;right&amp;quot;&amp;gt;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;octopressと同一のパーマリンクにする-オプション&#34;&gt;Octopressと同一のパーマリンクにする（オプション）&lt;/h2&gt;

&lt;p&gt;OctopressとHugoではURLの付与ルールが異なるので、パーマリンクを維持させるためには一手間必要です。&lt;/p&gt;

&lt;p&gt;たとえば、&lt;code&gt;2016-09-25-migrated-from-octopress-to-hugo.md&lt;/code&gt;というファイル名に対して、&lt;/p&gt;

&lt;p&gt;Octopressでは&lt;code&gt;/blog/2016/09/25/migrated-from-octopress-to-hugo/&lt;/code&gt;というURLになります。&lt;/p&gt;

&lt;p&gt;Hugoのデフォルト設定では&lt;code&gt;/post/2016-09-25-migrated-from-octopress-to-hugo/&lt;/code&gt;というURLとなります。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;config.toml&lt;/code&gt;に次の設定を加えてHugoのURLの付与ルールを変更することで、OctpressとHugoのURLを一致させました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
  post = &amp;quot;/blog/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして各記事に&lt;code&gt;slug&lt;/code&gt;属性を設定することで、Octopressと同じパーマリンクを維持しました。&lt;/p&gt;

&lt;p&gt;記事数が多い場合、すべての記事にslug属性を設定するのは手間だったので、次のようなRubyのスクリプトを使用しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;dir = &#39;content/post/&#39;
Dir::foreach(dir) do |filename|
  if filename =~ /\.markdown$/
    slug = filename.gsub(/\d{4}-\d{2}-\d{2}-/, &#39;&#39;).sub(&#39;.markdown&#39;, &#39;&#39;)
    puts &amp;quot;#{filename} : #{slug}&amp;quot;

    lines = []
    File::open(dir + filename) do |f|
      f.each do |line|
        lines &amp;lt;&amp;lt; line
      end
    end

    File::open(dir + filename, &#39;w&#39;) do |f|
      lines.each_with_index do |line, i|
        f.puts(&amp;quot;slug: #{slug}&amp;quot;) if i == 3
        f.print(line)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;slug&lt;/code&gt;を設定せずに、ファイル名から日付のprefixを削除してHugoのルールに合わせる方法もあります。&lt;/p&gt;

&lt;h1 id=&#34;deployコマンド&#34;&gt;deployコマンド&lt;/h1&gt;

&lt;p&gt;Hugoではdeployコマンドが内包されていないので、自作する必要があります。&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;rsync&lt;/code&gt;を使ってVPSにデプロイするシェルスクリプトを作成しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
rm -rf public
hugo

dir=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)
echo &amp;quot;dir: $dir&amp;quot;

ssh_host=&amp;quot;g22&amp;quot;
rsync --iconv=UTF-8-MAC,UTF-8 -avzc --delete --exclude-from=rsync-exclude ${dir}/public/ ${ssh_host}:/var/www/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rsync-exclude&lt;/code&gt;では上書きしたくないファイルやディレクトリを指定します。
当サイトでは &lt;a href=&#34;https://gam0022.net/webgl/&#34;&gt;&lt;code&gt;gam0022.net/webgl&lt;/code&gt;&lt;/a&gt;のようなサブディレクトリ以下のコンテンツがあるため、&lt;code&gt;rsync-exclude&lt;/code&gt;を次のように指定しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rsync-exclude&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;webgl/
*.swp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--iconv=UTF-8-MAC,UTF-8&lt;/code&gt;はリモート環境がMacで、かつURLに日本語を含むコンテンツがある場合(&lt;a href=&#34;https://gam0022.net/tags/レイマーチング/&#34;&gt;例としては日本語のタグ名を使用した場合&lt;/a&gt;)には必要なオプションです。
このオプションを付けると&lt;code&gt;UTF-8-MAC&lt;/code&gt;のファイル名をリモートでは&lt;code&gt;UTF-8&lt;/code&gt;に変換してコピーします。 詳しくは次の記事を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gam0022.net/blog/2012/08/11/use-rsync-iconv-option/&#34;&gt;カテゴリー名に濁点を含んだ日本語が使えない問題を解決する(Rsyncのiconvオプションを使う)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考記事&#34;&gt;参考記事&lt;/h1&gt;

&lt;p&gt;この記事を書くにあたって、次の記事を参考にさせていただきました。ありがとうございます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/&#34;&gt;ブログをOctopressからHugoに移行した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;コメント-アーカイブ&#34;&gt;コメント（アーカイブ）&lt;/h1&gt;

&lt;p&gt;※Disqusのコメントをクローズしたため、アーカイブとして画像を残しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gam0022.net/images/posts/2016-09-25-migrated-from-octopress-to-hugo/disqus_comments.png&#34; alt=&#34;Disqusのコメントのアーカイブ&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
